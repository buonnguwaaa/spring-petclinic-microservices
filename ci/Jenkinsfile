pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USER = 'thainhat'
    }
    
    stages {
        stage('Build and Push Images') {
            matrix {
                axes {
                    axis {
                        name 'SERVICE'
                        values 'api-gateway', 'config-server', 'discovery-server', 'admin-server', 'customers-service', 'vets-service', 'visits-service', 'genai-service'
                    }
                }
                stages {
                    stage('Checkout') {
                        steps {
                            checkout scm
                        }
                    }
                    
                    stage('Build Docker Image') {
                        steps {
                            script {
                                def imageTag = "${env.BRANCH_NAME}-${env.GIT_COMMIT.substring(0,8)}"
                                def imageName = "${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:${imageTag}"
                                echo "Building image: ${imageName}"
                                sh """
                                    docker build -t ${imageName} spring-petclinic-${SERVICE}
                                """
                            }
                        }
                    }
                    
                    stage('Push Docker Image') {
                        steps {
                            script {
                                def imageTag = "${env.BRANCH_NAME}-${env.GIT_COMMIT.substring(0,8)}"
                                def imageName = "${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:${imageTag}"
                                echo "Pushing image: ${imageName}"
                                sh """
                                    echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                                    docker push ${imageName}
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Please check the logs for details.'
        }
    }
}