pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USER = 'thainhat'
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    // Remove the lock file if it exists
                    sh '''
                        if [ -f ${WORKSPACE}/.git/index.lock ]; then
                            rm -f ${WORKSPACE}/.git/index.lock
                        fi
                    '''
                }
                checkout scm
            }
        }

        stage('Build Maven Project') {
            steps {
                sh '''
                    if ! command -v mvn &> /dev/null; then
                        apt-get update && apt-get install -y maven
                    fi

                    for SERVICE in api-gateway config-server discovery-server admin-server customers-service vets-service visits-service genai-service
                    do
                        cd spring-petclinic-${SERVICE}
                        mvn clean package -DskipTests
                        if [ ! -f target/*.jar ]; then
                            echo "Error: JAR file not found for ${SERVICE}"
                            exit 1
                        fi
                        cd ..
                    done
                '''
            }
        }

        stage('Build and Push Docker Images') {
            matrix {
                axes {
                    axis {
                        name 'SERVICE'
                        values 'api-gateway', 'config-server', 'discovery-server', 'admin-server', 'customers-service', 'vets-service', 'visits-service', 'genai-service'
                    }
                }
                stages {
                    stage('Build Docker Image') {
                        steps {
                            script {
                                def imageTag = "${env.BRANCH_NAME}-${env.GIT_COMMIT.take(8)}"
                                def serviceDir = "spring-petclinic-${SERVICE}"
                                def imageName = "${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:${imageTag}"

                                echo "Building image: ${imageName}"

                                sh """
                                    mv ${serviceDir}/target/*.jar ${serviceDir}/target/app.jar
                                    docker build -t ${imageName} -f ${serviceDir}/Dockerfile ${serviceDir}
                                    docker tag ${imageName} ${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:latest
                                """
                            }
                        }
                    }

                    stage('Push Docker Image') {
                        steps {
                            script {
                                def imageTag = "${env.BRANCH_NAME}-${env.GIT_COMMIT.take(8)}"
                                def imageName = "${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:${imageTag}"

                                echo "Pushing image: ${imageName}"

                                sh """
                                    echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                                    docker push ${imageName}
                                    docker push ${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:latest
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Deployment Summary') {
            steps {
                echo "All services have been built and pushed successfully!"
                echo "Services deployed: api-gateway, config-server, discovery-server, admin-server, customers-service, vets-service, visits-service, genai-service"
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Please check the logs for details.'
        }
    }
}