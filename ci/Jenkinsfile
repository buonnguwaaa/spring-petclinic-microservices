pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USER = 'thainhat'
        IMAGE_TAG = "${env.BRANCH_NAME}-${env.GIT_COMMIT.substring(0,8)}"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                // Remove the lock file if it exists
                sh '''
                    if [ -f ${WORKSPACE}/.git/index.lock ]; then
                        rm -f ${WORKSPACE}/.git/index.lock
                    fi
                '''
                // Checkout source code
                checkout scm
            }
        }

        stage('Build Maven Project') {
            steps {
                sh '''
                    # Install Maven if not installed
                    if ! command -v mvn &> /dev/null; then
                        apt-get update && apt-get install -y maven
                    fi
                    
                    # Build all microservices
                    mvn clean package -DskipTests
                '''
            }
        }

        stage('Build and Push Docker Images') {
            matrix {
                axes {
                    axis {
                        name 'SERVICE'
                        values 'api-gateway', 'config-server', 'discovery-server', 'admin-server', 'customers-service', 'vets-service', 'visits-service', 'genai-service'
                    }
                }
                stages {
                    stage('Build Docker Image') {
                        steps {
                            script {
                                try {
                                    def serviceDir = "spring-petclinic-${SERVICE}"
                                    def imageName = "${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:${IMAGE_TAG}"
                                    echo "Building image: ${imageName}"

                                    // Build Docker image for the current service
                                    sh """
                                        docker build -t ${imageName} -f ${serviceDir}/Dockerfile ${serviceDir}
                                    """
                                    // Create a tag for 'latest'
                                    sh """
                                        docker tag ${imageName} ${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:latest
                                    """
                                } catch (Exception e) {
                                    currentBuild.result = 'FAILURE'
                                    error "Failed to build Docker image for ${SERVICE}: ${e.message}"
                                }
                            }
                        }
                    }

                    stage('Push Docker Image') {
                        steps {
                            script {
                                try {
                                    def serviceDir = "spring-petclinic-${SERVICE}"
                                    def imageName = "${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:${IMAGE_TAG}"

                                    echo "Pushing image: ${imageName}"

                                    // Docker login and push the image to DockerHub
                                    sh """
                                        echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                                        docker push ${imageName}
                                        docker push ${DOCKERHUB_USER}/spring-petclinic-${SERVICE}:latest
                                    """
                                } catch (Exception e) {
                                    currentBuild.result = 'FAILURE'
                                    error "Failed to push Docker image for ${SERVICE}: ${e.message}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Deployment Summary') {
            steps {
                echo "All services have been built and pushed successfully!"
                echo "Services deployed: api-gateway, config-server, discovery-server, admin-server, customers-service, vets-service, visits-service, genai-service"
            }
        }
    }

    post {
        always {
            // Logout from Docker after job is done
            sh 'docker logout'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Please check the logs for details.'
        }
    }
}
